// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsProtoClient is the client API for MetricsProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsProtoClient interface {
	// Sends metrics
	SendMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error)
}

type metricsProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsProtoClient(cc grpc.ClientConnInterface) MetricsProtoClient {
	return &metricsProtoClient{cc}
}

func (c *metricsProtoClient) SendMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsReply, error) {
	out := new(MetricsReply)
	err := c.cc.Invoke(ctx, "/flow.MetricsProto/SendMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsProtoServer is the server API for MetricsProto service.
// All implementations must embed UnimplementedMetricsProtoServer
// for forward compatibility
type MetricsProtoServer interface {
	// Sends metrics
	SendMetrics(context.Context, *MetricsRequest) (*MetricsReply, error)
	mustEmbedUnimplementedMetricsProtoServer()
}

// UnimplementedMetricsProtoServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsProtoServer struct {
}

func (UnimplementedMetricsProtoServer) SendMetrics(context.Context, *MetricsRequest) (*MetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedMetricsProtoServer) mustEmbedUnimplementedMetricsProtoServer() {}

// UnsafeMetricsProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsProtoServer will
// result in compilation errors.
type UnsafeMetricsProtoServer interface {
	mustEmbedUnimplementedMetricsProtoServer()
}

func RegisterMetricsProtoServer(s grpc.ServiceRegistrar, srv MetricsProtoServer) {
	s.RegisterService(&MetricsProto_ServiceDesc, srv)
}

func _MetricsProto_SendMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsProtoServer).SendMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.MetricsProto/SendMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsProtoServer).SendMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsProto_ServiceDesc is the grpc.ServiceDesc for MetricsProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.MetricsProto",
	HandlerType: (*MetricsProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMetrics",
			Handler:    _MetricsProto_SendMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/pb/flow.proto",
}
