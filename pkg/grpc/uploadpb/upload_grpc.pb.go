// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uploadpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskProtoClient is the client API for TaskProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskProtoClient interface {
	// Sends task
	SendTask(ctx context.Context, opts ...grpc.CallOption) (TaskProto_SendTaskClient, error)
}

type taskProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskProtoClient(cc grpc.ClientConnInterface) TaskProtoClient {
	return &taskProtoClient{cc}
}

func (c *taskProtoClient) SendTask(ctx context.Context, opts ...grpc.CallOption) (TaskProto_SendTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskProto_ServiceDesc.Streams[0], "/flow.TaskProto/SendTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskProtoSendTaskClient{stream}
	return x, nil
}

type TaskProto_SendTaskClient interface {
	Send(*TaskRequest) error
	CloseAndRecv() (*TaskReply, error)
	grpc.ClientStream
}

type taskProtoSendTaskClient struct {
	grpc.ClientStream
}

func (x *taskProtoSendTaskClient) Send(m *TaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskProtoSendTaskClient) CloseAndRecv() (*TaskReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TaskReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskProtoServer is the server API for TaskProto service.
// All implementations must embed UnimplementedTaskProtoServer
// for forward compatibility
type TaskProtoServer interface {
	// Sends task
	SendTask(TaskProto_SendTaskServer) error
	mustEmbedUnimplementedTaskProtoServer()
}

// UnimplementedTaskProtoServer must be embedded to have forward compatible implementations.
type UnimplementedTaskProtoServer struct {
}

func (UnimplementedTaskProtoServer) SendTask(TaskProto_SendTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedTaskProtoServer) mustEmbedUnimplementedTaskProtoServer() {}

// UnsafeTaskProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskProtoServer will
// result in compilation errors.
type UnsafeTaskProtoServer interface {
	mustEmbedUnimplementedTaskProtoServer()
}

func RegisterTaskProtoServer(s grpc.ServiceRegistrar, srv TaskProtoServer) {
	s.RegisterService(&TaskProto_ServiceDesc, srv)
}

func _TaskProto_SendTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskProtoServer).SendTask(&taskProtoSendTaskServer{stream})
}

type TaskProto_SendTaskServer interface {
	SendAndClose(*TaskReply) error
	Recv() (*TaskRequest, error)
	grpc.ServerStream
}

type taskProtoSendTaskServer struct {
	grpc.ServerStream
}

func (x *taskProtoSendTaskServer) SendAndClose(m *TaskReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskProtoSendTaskServer) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskProto_ServiceDesc is the grpc.ServiceDesc for TaskProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.TaskProto",
	HandlerType: (*TaskProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTask",
			Handler:       _TaskProto_SendTask_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/uploadpb/upload.proto",
}
